/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface Il2BridgeInterface extends ethers.utils.Interface {
  functions: {
    "finalizeDeposit(address,address,address,uint256,bytes)": FunctionFragment;
    "l1Bridge()": FunctionFragment;
    "l1TokenAddress(address)": FunctionFragment;
    "l2TokenAddress(address)": FunctionFragment;
    "withdraw(address,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "finalizeDeposit",
    values: [string, string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "l1Bridge", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "l1TokenAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "l2TokenAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "finalizeDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "l1Bridge", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "l1TokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "l2TokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {};
}

export class Il2Bridge extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  listeners<T, G>(
    eventFilter?: TypedEventFilter<T, G>
  ): Array<TypedListener<T, G>>;
  off<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  on<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  once<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeListener<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeAllListeners<T, G>(eventFilter: TypedEventFilter<T, G>): this;

  queryFilter<T, G>(
    event: TypedEventFilter<T, G>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<T & G>>>;

  interface: Il2BridgeInterface;

  functions: {
    finalizeDeposit(
      _l1Sender: string,
      _l2Receiver: string,
      _l1Token: string,
      _amount: BigNumberish,
      _data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "finalizeDeposit(address,address,address,uint256,bytes)"(
      _l1Sender: string,
      _l2Receiver: string,
      _l1Token: string,
      _amount: BigNumberish,
      _data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    l1Bridge(overrides?: CallOverrides): Promise<[string]>;

    "l1Bridge()"(overrides?: CallOverrides): Promise<[string]>;

    l1TokenAddress(
      _l2Token: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "l1TokenAddress(address)"(
      _l2Token: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    l2TokenAddress(
      _l1Token: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "l2TokenAddress(address)"(
      _l1Token: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    withdraw(
      _l1Receiver: string,
      _l2Token: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdraw(address,address,uint256)"(
      _l1Receiver: string,
      _l2Token: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  finalizeDeposit(
    _l1Sender: string,
    _l2Receiver: string,
    _l1Token: string,
    _amount: BigNumberish,
    _data: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "finalizeDeposit(address,address,address,uint256,bytes)"(
    _l1Sender: string,
    _l2Receiver: string,
    _l1Token: string,
    _amount: BigNumberish,
    _data: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  l1Bridge(overrides?: CallOverrides): Promise<string>;

  "l1Bridge()"(overrides?: CallOverrides): Promise<string>;

  l1TokenAddress(_l2Token: string, overrides?: CallOverrides): Promise<string>;

  "l1TokenAddress(address)"(
    _l2Token: string,
    overrides?: CallOverrides
  ): Promise<string>;

  l2TokenAddress(_l1Token: string, overrides?: CallOverrides): Promise<string>;

  "l2TokenAddress(address)"(
    _l1Token: string,
    overrides?: CallOverrides
  ): Promise<string>;

  withdraw(
    _l1Receiver: string,
    _l2Token: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdraw(address,address,uint256)"(
    _l1Receiver: string,
    _l2Token: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    finalizeDeposit(
      _l1Sender: string,
      _l2Receiver: string,
      _l1Token: string,
      _amount: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "finalizeDeposit(address,address,address,uint256,bytes)"(
      _l1Sender: string,
      _l2Receiver: string,
      _l1Token: string,
      _amount: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    l1Bridge(overrides?: CallOverrides): Promise<string>;

    "l1Bridge()"(overrides?: CallOverrides): Promise<string>;

    l1TokenAddress(
      _l2Token: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "l1TokenAddress(address)"(
      _l2Token: string,
      overrides?: CallOverrides
    ): Promise<string>;

    l2TokenAddress(
      _l1Token: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "l2TokenAddress(address)"(
      _l1Token: string,
      overrides?: CallOverrides
    ): Promise<string>;

    withdraw(
      _l1Receiver: string,
      _l2Token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdraw(address,address,uint256)"(
      _l1Receiver: string,
      _l2Token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    finalizeDeposit(
      _l1Sender: string,
      _l2Receiver: string,
      _l1Token: string,
      _amount: BigNumberish,
      _data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "finalizeDeposit(address,address,address,uint256,bytes)"(
      _l1Sender: string,
      _l2Receiver: string,
      _l1Token: string,
      _amount: BigNumberish,
      _data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    l1Bridge(overrides?: CallOverrides): Promise<BigNumber>;

    "l1Bridge()"(overrides?: CallOverrides): Promise<BigNumber>;

    l1TokenAddress(
      _l2Token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "l1TokenAddress(address)"(
      _l2Token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    l2TokenAddress(
      _l1Token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "l2TokenAddress(address)"(
      _l1Token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      _l1Receiver: string,
      _l2Token: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdraw(address,address,uint256)"(
      _l1Receiver: string,
      _l2Token: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    finalizeDeposit(
      _l1Sender: string,
      _l2Receiver: string,
      _l1Token: string,
      _amount: BigNumberish,
      _data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "finalizeDeposit(address,address,address,uint256,bytes)"(
      _l1Sender: string,
      _l2Receiver: string,
      _l1Token: string,
      _amount: BigNumberish,
      _data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    l1Bridge(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "l1Bridge()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    l1TokenAddress(
      _l2Token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "l1TokenAddress(address)"(
      _l2Token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    l2TokenAddress(
      _l1Token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "l2TokenAddress(address)"(
      _l1Token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      _l1Receiver: string,
      _l2Token: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdraw(address,address,uint256)"(
      _l1Receiver: string,
      _l2Token: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
