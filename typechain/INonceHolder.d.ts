/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface INonceHolderInterface extends ethers.utils.Interface {
  functions: {
    "getDeploymentNonce(address)": FunctionFragment;
    "getMinNonce(address)": FunctionFragment;
    "getRawNonce(address)": FunctionFragment;
    "getValueUnderNonce(uint256)": FunctionFragment;
    "increaseMinNonce(uint256)": FunctionFragment;
    "incrementDeploymentNonce(address)": FunctionFragment;
    "incrementMinNonceIfEquals(uint256)": FunctionFragment;
    "isNonceUsed(address,uint256)": FunctionFragment;
    "setValueUnderNonce(uint256,uint256)": FunctionFragment;
    "validateNonceUsage(address,uint256,bool)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getDeploymentNonce",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getMinNonce", values: [string]): string;
  encodeFunctionData(functionFragment: "getRawNonce", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getValueUnderNonce",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseMinNonce",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "incrementDeploymentNonce",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "incrementMinNonceIfEquals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isNonceUsed",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setValueUnderNonce",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "validateNonceUsage",
    values: [string, BigNumberish, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "getDeploymentNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRawNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValueUnderNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseMinNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "incrementDeploymentNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "incrementMinNonceIfEquals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isNonceUsed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setValueUnderNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateNonceUsage",
    data: BytesLike
  ): Result;

  events: {
    "ValueSetUnderNonce(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ValueSetUnderNonce"): EventFragment;
}

export class INonceHolder extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: INonceHolderInterface;

  functions: {
    getDeploymentNonce(
      _address: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getDeploymentNonce(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getMinNonce(
      _address: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getMinNonce(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getRawNonce(
      _address: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getRawNonce(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getValueUnderNonce(
      _key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getValueUnderNonce(uint256)"(
      _key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    increaseMinNonce(
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "increaseMinNonce(uint256)"(
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    incrementDeploymentNonce(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "incrementDeploymentNonce(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    incrementMinNonceIfEquals(
      _expectedNonce: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "incrementMinNonceIfEquals(uint256)"(
      _expectedNonce: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    isNonceUsed(
      _address: string,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isNonceUsed(address,uint256)"(
      _address: string,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    setValueUnderNonce(
      _key: BigNumberish,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setValueUnderNonce(uint256,uint256)"(
      _key: BigNumberish,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    validateNonceUsage(
      _address: string,
      _key: BigNumberish,
      _shouldBeUsed: boolean,
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    "validateNonceUsage(address,uint256,bool)"(
      _address: string,
      _key: BigNumberish,
      _shouldBeUsed: boolean,
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;
  };

  getDeploymentNonce(
    _address: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getDeploymentNonce(address)"(
    _address: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMinNonce(_address: string, overrides?: CallOverrides): Promise<BigNumber>;

  "getMinNonce(address)"(
    _address: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRawNonce(_address: string, overrides?: CallOverrides): Promise<BigNumber>;

  "getRawNonce(address)"(
    _address: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getValueUnderNonce(
    _key: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getValueUnderNonce(uint256)"(
    _key: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  increaseMinNonce(
    _value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "increaseMinNonce(uint256)"(
    _value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  incrementDeploymentNonce(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "incrementDeploymentNonce(address)"(
    _address: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  incrementMinNonceIfEquals(
    _expectedNonce: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "incrementMinNonceIfEquals(uint256)"(
    _expectedNonce: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  isNonceUsed(
    _address: string,
    _nonce: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isNonceUsed(address,uint256)"(
    _address: string,
    _nonce: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  setValueUnderNonce(
    _key: BigNumberish,
    _value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setValueUnderNonce(uint256,uint256)"(
    _key: BigNumberish,
    _value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  validateNonceUsage(
    _address: string,
    _key: BigNumberish,
    _shouldBeUsed: boolean,
    overrides?: CallOverrides
  ): Promise<void>;

  "validateNonceUsage(address,uint256,bool)"(
    _address: string,
    _key: BigNumberish,
    _shouldBeUsed: boolean,
    overrides?: CallOverrides
  ): Promise<void>;

  callStatic: {
    getDeploymentNonce(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getDeploymentNonce(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinNonce(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMinNonce(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRawNonce(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRawNonce(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getValueUnderNonce(
      _key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getValueUnderNonce(uint256)"(
      _key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseMinNonce(
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "increaseMinNonce(uint256)"(
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    incrementDeploymentNonce(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "incrementDeploymentNonce(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    incrementMinNonceIfEquals(
      _expectedNonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "incrementMinNonceIfEquals(uint256)"(
      _expectedNonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    isNonceUsed(
      _address: string,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isNonceUsed(address,uint256)"(
      _address: string,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setValueUnderNonce(
      _key: BigNumberish,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setValueUnderNonce(uint256,uint256)"(
      _key: BigNumberish,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    validateNonceUsage(
      _address: string,
      _key: BigNumberish,
      _shouldBeUsed: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "validateNonceUsage(address,uint256,bool)"(
      _address: string,
      _key: BigNumberish,
      _shouldBeUsed: boolean,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    ValueSetUnderNonce(
      accountAddress: string | null,
      key: BigNumberish | null,
      value: null
    ): EventFilter;
  };

  estimateGas: {
    getDeploymentNonce(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getDeploymentNonce(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinNonce(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMinNonce(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRawNonce(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRawNonce(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getValueUnderNonce(
      _key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getValueUnderNonce(uint256)"(
      _key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseMinNonce(
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "increaseMinNonce(uint256)"(
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    incrementDeploymentNonce(
      _address: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "incrementDeploymentNonce(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    incrementMinNonceIfEquals(
      _expectedNonce: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "incrementMinNonceIfEquals(uint256)"(
      _expectedNonce: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    isNonceUsed(
      _address: string,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isNonceUsed(address,uint256)"(
      _address: string,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setValueUnderNonce(
      _key: BigNumberish,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setValueUnderNonce(uint256,uint256)"(
      _key: BigNumberish,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    validateNonceUsage(
      _address: string,
      _key: BigNumberish,
      _shouldBeUsed: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "validateNonceUsage(address,uint256,bool)"(
      _address: string,
      _key: BigNumberish,
      _shouldBeUsed: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getDeploymentNonce(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getDeploymentNonce(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMinNonce(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMinNonce(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRawNonce(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRawNonce(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getValueUnderNonce(
      _key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getValueUnderNonce(uint256)"(
      _key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseMinNonce(
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "increaseMinNonce(uint256)"(
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    incrementDeploymentNonce(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "incrementDeploymentNonce(address)"(
      _address: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    incrementMinNonceIfEquals(
      _expectedNonce: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "incrementMinNonceIfEquals(uint256)"(
      _expectedNonce: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    isNonceUsed(
      _address: string,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isNonceUsed(address,uint256)"(
      _address: string,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setValueUnderNonce(
      _key: BigNumberish,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setValueUnderNonce(uint256,uint256)"(
      _key: BigNumberish,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    validateNonceUsage(
      _address: string,
      _key: BigNumberish,
      _shouldBeUsed: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "validateNonceUsage(address,uint256,bool)"(
      _address: string,
      _key: BigNumberish,
      _shouldBeUsed: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
