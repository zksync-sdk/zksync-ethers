/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IBridgehubInterface extends ethers.utils.Interface {
  functions: {
    "addStateTransitionManager(address)": FunctionFragment;
    "addToken(address)": FunctionFragment;
    "addTokenBridge(address)": FunctionFragment;
    "baseToken(uint256)": FunctionFragment;
    "baseTokenBridge(uint256)": FunctionFragment;
    "createNewChain(uint256,address,address,address,uint256,address,bytes)": FunctionFragment;
    "getStateTransition(uint256)": FunctionFragment;
    "l2TransactionBaseCost(uint256,uint256,uint256,uint256)": FunctionFragment;
    "proveL1ToL2TransactionStatus(uint256,bytes32,uint256,uint256,uint16,bytes32[],uint8)": FunctionFragment;
    "proveL2LogInclusion(uint256,uint256,uint256,tuple,bytes32[])": FunctionFragment;
    "proveL2MessageInclusion(uint256,uint256,uint256,tuple,bytes32[])": FunctionFragment;
    "removeStateTransitionManager(address)": FunctionFragment;
    "requestL2Transaction(tuple)": FunctionFragment;
    "requestL2TransactionTwoBridges(tuple)": FunctionFragment;
    "setWethBridge(address)": FunctionFragment;
    "stateTransitionManager(uint256)": FunctionFragment;
    "stateTransitionManagerIsRegistered(address)": FunctionFragment;
    "tokenBridgeIsRegistered(address)": FunctionFragment;
    "tokenIsRegistered(address)": FunctionFragment;
    "wethBridge()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addStateTransitionManager",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "addToken", values: [string]): string;
  encodeFunctionData(
    functionFragment: "addTokenBridge",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "baseToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "baseTokenBridge",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createNewChain",
    values: [
      BigNumberish,
      string,
      string,
      string,
      BigNumberish,
      string,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getStateTransition",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "l2TransactionBaseCost",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proveL1ToL2TransactionStatus",
    values: [
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike[],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "proveL2LogInclusion",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      {
        l2ShardId: BigNumberish;
        isService: boolean;
        txNumberInBatch: BigNumberish;
        sender: string;
        key: BytesLike;
        value: BytesLike;
      },
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "proveL2MessageInclusion",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      { txNumberInBatch: BigNumberish; sender: string; data: BytesLike },
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeStateTransitionManager",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "requestL2Transaction",
    values: [
      {
        chainId: BigNumberish;
        mintValue: BigNumberish;
        l2Contract: string;
        l2Value: BigNumberish;
        l2Calldata: BytesLike;
        l2GasLimit: BigNumberish;
        l2GasPerPubdataByteLimit: BigNumberish;
        factoryDeps: BytesLike[];
        refundRecipient: string;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "requestL2TransactionTwoBridges",
    values: [
      {
        chainId: BigNumberish;
        mintValue: BigNumberish;
        l2Value: BigNumberish;
        l2GasLimit: BigNumberish;
        l2GasPerPubdataByteLimit: BigNumberish;
        refundRecipient: string;
        secondBridgeAddress: string;
        secondBridgeValue: BigNumberish;
        secondBridgeCalldata: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setWethBridge",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "stateTransitionManager",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stateTransitionManagerIsRegistered",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenBridgeIsRegistered",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenIsRegistered",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "wethBridge",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "addStateTransitionManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addTokenBridge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "baseToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "baseTokenBridge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createNewChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStateTransition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "l2TransactionBaseCost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proveL1ToL2TransactionStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proveL2LogInclusion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proveL2MessageInclusion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeStateTransitionManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestL2Transaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestL2TransactionTwoBridges",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWethBridge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stateTransitionManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stateTransitionManagerIsRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenBridgeIsRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenIsRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "wethBridge", data: BytesLike): Result;

  events: {
    "NewChain(uint256,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewChain"): EventFragment;
}

export class IBridgehub extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IBridgehubInterface;

  functions: {
    addStateTransitionManager(
      _stateTransitionManager: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addStateTransitionManager(address)"(
      _stateTransitionManager: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addToken(
      _token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addToken(address)"(
      _token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addTokenBridge(
      _tokenBridge: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addTokenBridge(address)"(
      _tokenBridge: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    baseToken(
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "baseToken(uint256)"(
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    baseTokenBridge(
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "baseTokenBridge(uint256)"(
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    createNewChain(
      _chainId: BigNumberish,
      _stateTransitionManager: string,
      _baseToken: string,
      _baseTokenBridge: string,
      _salt: BigNumberish,
      _governor: string,
      _initData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createNewChain(uint256,address,address,address,uint256,address,bytes)"(
      _chainId: BigNumberish,
      _stateTransitionManager: string,
      _baseToken: string,
      _baseTokenBridge: string,
      _salt: BigNumberish,
      _governor: string,
      _initData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getStateTransition(
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getStateTransition(uint256)"(
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    l2TransactionBaseCost(
      _chainId: BigNumberish,
      _gasPrice: BigNumberish,
      _l2GasLimit: BigNumberish,
      _l2GasPerPubdataByteLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "l2TransactionBaseCost(uint256,uint256,uint256,uint256)"(
      _chainId: BigNumberish,
      _gasPrice: BigNumberish,
      _l2GasLimit: BigNumberish,
      _l2GasPerPubdataByteLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    proveL1ToL2TransactionStatus(
      _chainId: BigNumberish,
      _l2TxHash: BytesLike,
      _l2BatchNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBatch: BigNumberish,
      _merkleProof: BytesLike[],
      _status: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "proveL1ToL2TransactionStatus(uint256,bytes32,uint256,uint256,uint16,bytes32[],uint8)"(
      _chainId: BigNumberish,
      _l2TxHash: BytesLike,
      _l2BatchNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBatch: BigNumberish,
      _merkleProof: BytesLike[],
      _status: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    proveL2LogInclusion(
      _chainId: BigNumberish,
      _batchNumber: BigNumberish,
      _index: BigNumberish,
      _log: {
        l2ShardId: BigNumberish;
        isService: boolean;
        txNumberInBatch: BigNumberish;
        sender: string;
        key: BytesLike;
        value: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "proveL2LogInclusion(uint256,uint256,uint256,tuple,bytes32[])"(
      _chainId: BigNumberish,
      _batchNumber: BigNumberish,
      _index: BigNumberish,
      _log: {
        l2ShardId: BigNumberish;
        isService: boolean;
        txNumberInBatch: BigNumberish;
        sender: string;
        key: BytesLike;
        value: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    proveL2MessageInclusion(
      _chainId: BigNumberish,
      _batchNumber: BigNumberish,
      _index: BigNumberish,
      _message: {
        txNumberInBatch: BigNumberish;
        sender: string;
        data: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "proveL2MessageInclusion(uint256,uint256,uint256,tuple,bytes32[])"(
      _chainId: BigNumberish,
      _batchNumber: BigNumberish,
      _index: BigNumberish,
      _message: {
        txNumberInBatch: BigNumberish;
        sender: string;
        data: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    removeStateTransitionManager(
      _stateTransitionManager: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeStateTransitionManager(address)"(
      _stateTransitionManager: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    requestL2Transaction(
      _request: {
        chainId: BigNumberish;
        mintValue: BigNumberish;
        l2Contract: string;
        l2Value: BigNumberish;
        l2Calldata: BytesLike;
        l2GasLimit: BigNumberish;
        l2GasPerPubdataByteLimit: BigNumberish;
        factoryDeps: BytesLike[];
        refundRecipient: string;
      },
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "requestL2Transaction(tuple)"(
      _request: {
        chainId: BigNumberish;
        mintValue: BigNumberish;
        l2Contract: string;
        l2Value: BigNumberish;
        l2Calldata: BytesLike;
        l2GasLimit: BigNumberish;
        l2GasPerPubdataByteLimit: BigNumberish;
        factoryDeps: BytesLike[];
        refundRecipient: string;
      },
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    requestL2TransactionTwoBridges(
      _request: {
        chainId: BigNumberish;
        mintValue: BigNumberish;
        l2Value: BigNumberish;
        l2GasLimit: BigNumberish;
        l2GasPerPubdataByteLimit: BigNumberish;
        refundRecipient: string;
        secondBridgeAddress: string;
        secondBridgeValue: BigNumberish;
        secondBridgeCalldata: BytesLike;
      },
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "requestL2TransactionTwoBridges(tuple)"(
      _request: {
        chainId: BigNumberish;
        mintValue: BigNumberish;
        l2Value: BigNumberish;
        l2GasLimit: BigNumberish;
        l2GasPerPubdataByteLimit: BigNumberish;
        refundRecipient: string;
        secondBridgeAddress: string;
        secondBridgeValue: BigNumberish;
        secondBridgeCalldata: BytesLike;
      },
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    setWethBridge(
      _wethBridge: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setWethBridge(address)"(
      _wethBridge: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    stateTransitionManager(
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "stateTransitionManager(uint256)"(
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    stateTransitionManagerIsRegistered(
      _stateTransitionManager: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "stateTransitionManagerIsRegistered(address)"(
      _stateTransitionManager: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    tokenBridgeIsRegistered(
      _baseTokenBridge: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "tokenBridgeIsRegistered(address)"(
      _baseTokenBridge: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    tokenIsRegistered(
      _baseToken: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "tokenIsRegistered(address)"(
      _baseToken: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    wethBridge(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "wethBridge()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;
  };

  addStateTransitionManager(
    _stateTransitionManager: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addStateTransitionManager(address)"(
    _stateTransitionManager: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addToken(_token: string, overrides?: Overrides): Promise<ContractTransaction>;

  "addToken(address)"(
    _token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addTokenBridge(
    _tokenBridge: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addTokenBridge(address)"(
    _tokenBridge: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  baseToken(_chainId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "baseToken(uint256)"(
    _chainId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  baseTokenBridge(
    _chainId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "baseTokenBridge(uint256)"(
    _chainId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  createNewChain(
    _chainId: BigNumberish,
    _stateTransitionManager: string,
    _baseToken: string,
    _baseTokenBridge: string,
    _salt: BigNumberish,
    _governor: string,
    _initData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createNewChain(uint256,address,address,address,uint256,address,bytes)"(
    _chainId: BigNumberish,
    _stateTransitionManager: string,
    _baseToken: string,
    _baseTokenBridge: string,
    _salt: BigNumberish,
    _governor: string,
    _initData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getStateTransition(
    _chainId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getStateTransition(uint256)"(
    _chainId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  l2TransactionBaseCost(
    _chainId: BigNumberish,
    _gasPrice: BigNumberish,
    _l2GasLimit: BigNumberish,
    _l2GasPerPubdataByteLimit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "l2TransactionBaseCost(uint256,uint256,uint256,uint256)"(
    _chainId: BigNumberish,
    _gasPrice: BigNumberish,
    _l2GasLimit: BigNumberish,
    _l2GasPerPubdataByteLimit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  proveL1ToL2TransactionStatus(
    _chainId: BigNumberish,
    _l2TxHash: BytesLike,
    _l2BatchNumber: BigNumberish,
    _l2MessageIndex: BigNumberish,
    _l2TxNumberInBatch: BigNumberish,
    _merkleProof: BytesLike[],
    _status: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "proveL1ToL2TransactionStatus(uint256,bytes32,uint256,uint256,uint16,bytes32[],uint8)"(
    _chainId: BigNumberish,
    _l2TxHash: BytesLike,
    _l2BatchNumber: BigNumberish,
    _l2MessageIndex: BigNumberish,
    _l2TxNumberInBatch: BigNumberish,
    _merkleProof: BytesLike[],
    _status: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  proveL2LogInclusion(
    _chainId: BigNumberish,
    _batchNumber: BigNumberish,
    _index: BigNumberish,
    _log: {
      l2ShardId: BigNumberish;
      isService: boolean;
      txNumberInBatch: BigNumberish;
      sender: string;
      key: BytesLike;
      value: BytesLike;
    },
    _proof: BytesLike[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  "proveL2LogInclusion(uint256,uint256,uint256,tuple,bytes32[])"(
    _chainId: BigNumberish,
    _batchNumber: BigNumberish,
    _index: BigNumberish,
    _log: {
      l2ShardId: BigNumberish;
      isService: boolean;
      txNumberInBatch: BigNumberish;
      sender: string;
      key: BytesLike;
      value: BytesLike;
    },
    _proof: BytesLike[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  proveL2MessageInclusion(
    _chainId: BigNumberish,
    _batchNumber: BigNumberish,
    _index: BigNumberish,
    _message: {
      txNumberInBatch: BigNumberish;
      sender: string;
      data: BytesLike;
    },
    _proof: BytesLike[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  "proveL2MessageInclusion(uint256,uint256,uint256,tuple,bytes32[])"(
    _chainId: BigNumberish,
    _batchNumber: BigNumberish,
    _index: BigNumberish,
    _message: {
      txNumberInBatch: BigNumberish;
      sender: string;
      data: BytesLike;
    },
    _proof: BytesLike[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  removeStateTransitionManager(
    _stateTransitionManager: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeStateTransitionManager(address)"(
    _stateTransitionManager: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  requestL2Transaction(
    _request: {
      chainId: BigNumberish;
      mintValue: BigNumberish;
      l2Contract: string;
      l2Value: BigNumberish;
      l2Calldata: BytesLike;
      l2GasLimit: BigNumberish;
      l2GasPerPubdataByteLimit: BigNumberish;
      factoryDeps: BytesLike[];
      refundRecipient: string;
    },
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "requestL2Transaction(tuple)"(
    _request: {
      chainId: BigNumberish;
      mintValue: BigNumberish;
      l2Contract: string;
      l2Value: BigNumberish;
      l2Calldata: BytesLike;
      l2GasLimit: BigNumberish;
      l2GasPerPubdataByteLimit: BigNumberish;
      factoryDeps: BytesLike[];
      refundRecipient: string;
    },
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  requestL2TransactionTwoBridges(
    _request: {
      chainId: BigNumberish;
      mintValue: BigNumberish;
      l2Value: BigNumberish;
      l2GasLimit: BigNumberish;
      l2GasPerPubdataByteLimit: BigNumberish;
      refundRecipient: string;
      secondBridgeAddress: string;
      secondBridgeValue: BigNumberish;
      secondBridgeCalldata: BytesLike;
    },
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "requestL2TransactionTwoBridges(tuple)"(
    _request: {
      chainId: BigNumberish;
      mintValue: BigNumberish;
      l2Value: BigNumberish;
      l2GasLimit: BigNumberish;
      l2GasPerPubdataByteLimit: BigNumberish;
      refundRecipient: string;
      secondBridgeAddress: string;
      secondBridgeValue: BigNumberish;
      secondBridgeCalldata: BytesLike;
    },
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  setWethBridge(
    _wethBridge: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setWethBridge(address)"(
    _wethBridge: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  stateTransitionManager(
    _chainId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "stateTransitionManager(uint256)"(
    _chainId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  stateTransitionManagerIsRegistered(
    _stateTransitionManager: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "stateTransitionManagerIsRegistered(address)"(
    _stateTransitionManager: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  tokenBridgeIsRegistered(
    _baseTokenBridge: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "tokenBridgeIsRegistered(address)"(
    _baseTokenBridge: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  tokenIsRegistered(
    _baseToken: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "tokenIsRegistered(address)"(
    _baseToken: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  wethBridge(overrides?: CallOverrides): Promise<string>;

  "wethBridge()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    addStateTransitionManager(
      _stateTransitionManager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "addStateTransitionManager(address)"(
      _stateTransitionManager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addToken(_token: string, overrides?: CallOverrides): Promise<void>;

    "addToken(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addTokenBridge(
      _tokenBridge: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "addTokenBridge(address)"(
      _tokenBridge: string,
      overrides?: CallOverrides
    ): Promise<void>;

    baseToken(
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "baseToken(uint256)"(
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    baseTokenBridge(
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "baseTokenBridge(uint256)"(
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    createNewChain(
      _chainId: BigNumberish,
      _stateTransitionManager: string,
      _baseToken: string,
      _baseTokenBridge: string,
      _salt: BigNumberish,
      _governor: string,
      _initData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "createNewChain(uint256,address,address,address,uint256,address,bytes)"(
      _chainId: BigNumberish,
      _stateTransitionManager: string,
      _baseToken: string,
      _baseTokenBridge: string,
      _salt: BigNumberish,
      _governor: string,
      _initData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStateTransition(
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getStateTransition(uint256)"(
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    l2TransactionBaseCost(
      _chainId: BigNumberish,
      _gasPrice: BigNumberish,
      _l2GasLimit: BigNumberish,
      _l2GasPerPubdataByteLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "l2TransactionBaseCost(uint256,uint256,uint256,uint256)"(
      _chainId: BigNumberish,
      _gasPrice: BigNumberish,
      _l2GasLimit: BigNumberish,
      _l2GasPerPubdataByteLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proveL1ToL2TransactionStatus(
      _chainId: BigNumberish,
      _l2TxHash: BytesLike,
      _l2BatchNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBatch: BigNumberish,
      _merkleProof: BytesLike[],
      _status: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "proveL1ToL2TransactionStatus(uint256,bytes32,uint256,uint256,uint16,bytes32[],uint8)"(
      _chainId: BigNumberish,
      _l2TxHash: BytesLike,
      _l2BatchNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBatch: BigNumberish,
      _merkleProof: BytesLike[],
      _status: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    proveL2LogInclusion(
      _chainId: BigNumberish,
      _batchNumber: BigNumberish,
      _index: BigNumberish,
      _log: {
        l2ShardId: BigNumberish;
        isService: boolean;
        txNumberInBatch: BigNumberish;
        sender: string;
        key: BytesLike;
        value: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    "proveL2LogInclusion(uint256,uint256,uint256,tuple,bytes32[])"(
      _chainId: BigNumberish,
      _batchNumber: BigNumberish,
      _index: BigNumberish,
      _log: {
        l2ShardId: BigNumberish;
        isService: boolean;
        txNumberInBatch: BigNumberish;
        sender: string;
        key: BytesLike;
        value: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    proveL2MessageInclusion(
      _chainId: BigNumberish,
      _batchNumber: BigNumberish,
      _index: BigNumberish,
      _message: {
        txNumberInBatch: BigNumberish;
        sender: string;
        data: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    "proveL2MessageInclusion(uint256,uint256,uint256,tuple,bytes32[])"(
      _chainId: BigNumberish,
      _batchNumber: BigNumberish,
      _index: BigNumberish,
      _message: {
        txNumberInBatch: BigNumberish;
        sender: string;
        data: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    removeStateTransitionManager(
      _stateTransitionManager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeStateTransitionManager(address)"(
      _stateTransitionManager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    requestL2Transaction(
      _request: {
        chainId: BigNumberish;
        mintValue: BigNumberish;
        l2Contract: string;
        l2Value: BigNumberish;
        l2Calldata: BytesLike;
        l2GasLimit: BigNumberish;
        l2GasPerPubdataByteLimit: BigNumberish;
        factoryDeps: BytesLike[];
        refundRecipient: string;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    "requestL2Transaction(tuple)"(
      _request: {
        chainId: BigNumberish;
        mintValue: BigNumberish;
        l2Contract: string;
        l2Value: BigNumberish;
        l2Calldata: BytesLike;
        l2GasLimit: BigNumberish;
        l2GasPerPubdataByteLimit: BigNumberish;
        factoryDeps: BytesLike[];
        refundRecipient: string;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    requestL2TransactionTwoBridges(
      _request: {
        chainId: BigNumberish;
        mintValue: BigNumberish;
        l2Value: BigNumberish;
        l2GasLimit: BigNumberish;
        l2GasPerPubdataByteLimit: BigNumberish;
        refundRecipient: string;
        secondBridgeAddress: string;
        secondBridgeValue: BigNumberish;
        secondBridgeCalldata: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    "requestL2TransactionTwoBridges(tuple)"(
      _request: {
        chainId: BigNumberish;
        mintValue: BigNumberish;
        l2Value: BigNumberish;
        l2GasLimit: BigNumberish;
        l2GasPerPubdataByteLimit: BigNumberish;
        refundRecipient: string;
        secondBridgeAddress: string;
        secondBridgeValue: BigNumberish;
        secondBridgeCalldata: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    setWethBridge(
      _wethBridge: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setWethBridge(address)"(
      _wethBridge: string,
      overrides?: CallOverrides
    ): Promise<void>;

    stateTransitionManager(
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "stateTransitionManager(uint256)"(
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    stateTransitionManagerIsRegistered(
      _stateTransitionManager: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "stateTransitionManagerIsRegistered(address)"(
      _stateTransitionManager: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    tokenBridgeIsRegistered(
      _baseTokenBridge: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "tokenBridgeIsRegistered(address)"(
      _baseTokenBridge: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    tokenIsRegistered(
      _baseToken: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "tokenIsRegistered(address)"(
      _baseToken: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    wethBridge(overrides?: CallOverrides): Promise<string>;

    "wethBridge()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    NewChain(
      chainId: BigNumberish | null,
      stateTransitionManager: null,
      chainGovernance: string | null
    ): EventFilter;
  };

  estimateGas: {
    addStateTransitionManager(
      _stateTransitionManager: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addStateTransitionManager(address)"(
      _stateTransitionManager: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    addToken(_token: string, overrides?: Overrides): Promise<BigNumber>;

    "addToken(address)"(
      _token: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    addTokenBridge(
      _tokenBridge: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addTokenBridge(address)"(
      _tokenBridge: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    baseToken(
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "baseToken(uint256)"(
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    baseTokenBridge(
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "baseTokenBridge(uint256)"(
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createNewChain(
      _chainId: BigNumberish,
      _stateTransitionManager: string,
      _baseToken: string,
      _baseTokenBridge: string,
      _salt: BigNumberish,
      _governor: string,
      _initData: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createNewChain(uint256,address,address,address,uint256,address,bytes)"(
      _chainId: BigNumberish,
      _stateTransitionManager: string,
      _baseToken: string,
      _baseTokenBridge: string,
      _salt: BigNumberish,
      _governor: string,
      _initData: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getStateTransition(
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getStateTransition(uint256)"(
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    l2TransactionBaseCost(
      _chainId: BigNumberish,
      _gasPrice: BigNumberish,
      _l2GasLimit: BigNumberish,
      _l2GasPerPubdataByteLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "l2TransactionBaseCost(uint256,uint256,uint256,uint256)"(
      _chainId: BigNumberish,
      _gasPrice: BigNumberish,
      _l2GasLimit: BigNumberish,
      _l2GasPerPubdataByteLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proveL1ToL2TransactionStatus(
      _chainId: BigNumberish,
      _l2TxHash: BytesLike,
      _l2BatchNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBatch: BigNumberish,
      _merkleProof: BytesLike[],
      _status: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "proveL1ToL2TransactionStatus(uint256,bytes32,uint256,uint256,uint16,bytes32[],uint8)"(
      _chainId: BigNumberish,
      _l2TxHash: BytesLike,
      _l2BatchNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBatch: BigNumberish,
      _merkleProof: BytesLike[],
      _status: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proveL2LogInclusion(
      _chainId: BigNumberish,
      _batchNumber: BigNumberish,
      _index: BigNumberish,
      _log: {
        l2ShardId: BigNumberish;
        isService: boolean;
        txNumberInBatch: BigNumberish;
        sender: string;
        key: BytesLike;
        value: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "proveL2LogInclusion(uint256,uint256,uint256,tuple,bytes32[])"(
      _chainId: BigNumberish,
      _batchNumber: BigNumberish,
      _index: BigNumberish,
      _log: {
        l2ShardId: BigNumberish;
        isService: boolean;
        txNumberInBatch: BigNumberish;
        sender: string;
        key: BytesLike;
        value: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proveL2MessageInclusion(
      _chainId: BigNumberish,
      _batchNumber: BigNumberish,
      _index: BigNumberish,
      _message: {
        txNumberInBatch: BigNumberish;
        sender: string;
        data: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "proveL2MessageInclusion(uint256,uint256,uint256,tuple,bytes32[])"(
      _chainId: BigNumberish,
      _batchNumber: BigNumberish,
      _index: BigNumberish,
      _message: {
        txNumberInBatch: BigNumberish;
        sender: string;
        data: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeStateTransitionManager(
      _stateTransitionManager: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeStateTransitionManager(address)"(
      _stateTransitionManager: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    requestL2Transaction(
      _request: {
        chainId: BigNumberish;
        mintValue: BigNumberish;
        l2Contract: string;
        l2Value: BigNumberish;
        l2Calldata: BytesLike;
        l2GasLimit: BigNumberish;
        l2GasPerPubdataByteLimit: BigNumberish;
        factoryDeps: BytesLike[];
        refundRecipient: string;
      },
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "requestL2Transaction(tuple)"(
      _request: {
        chainId: BigNumberish;
        mintValue: BigNumberish;
        l2Contract: string;
        l2Value: BigNumberish;
        l2Calldata: BytesLike;
        l2GasLimit: BigNumberish;
        l2GasPerPubdataByteLimit: BigNumberish;
        factoryDeps: BytesLike[];
        refundRecipient: string;
      },
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    requestL2TransactionTwoBridges(
      _request: {
        chainId: BigNumberish;
        mintValue: BigNumberish;
        l2Value: BigNumberish;
        l2GasLimit: BigNumberish;
        l2GasPerPubdataByteLimit: BigNumberish;
        refundRecipient: string;
        secondBridgeAddress: string;
        secondBridgeValue: BigNumberish;
        secondBridgeCalldata: BytesLike;
      },
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "requestL2TransactionTwoBridges(tuple)"(
      _request: {
        chainId: BigNumberish;
        mintValue: BigNumberish;
        l2Value: BigNumberish;
        l2GasLimit: BigNumberish;
        l2GasPerPubdataByteLimit: BigNumberish;
        refundRecipient: string;
        secondBridgeAddress: string;
        secondBridgeValue: BigNumberish;
        secondBridgeCalldata: BytesLike;
      },
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    setWethBridge(
      _wethBridge: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setWethBridge(address)"(
      _wethBridge: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    stateTransitionManager(
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "stateTransitionManager(uint256)"(
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stateTransitionManagerIsRegistered(
      _stateTransitionManager: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "stateTransitionManagerIsRegistered(address)"(
      _stateTransitionManager: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenBridgeIsRegistered(
      _baseTokenBridge: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenBridgeIsRegistered(address)"(
      _baseTokenBridge: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenIsRegistered(
      _baseToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenIsRegistered(address)"(
      _baseToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    wethBridge(overrides?: CallOverrides): Promise<BigNumber>;

    "wethBridge()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addStateTransitionManager(
      _stateTransitionManager: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addStateTransitionManager(address)"(
      _stateTransitionManager: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addToken(
      _token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addToken(address)"(
      _token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addTokenBridge(
      _tokenBridge: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addTokenBridge(address)"(
      _tokenBridge: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    baseToken(
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "baseToken(uint256)"(
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    baseTokenBridge(
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "baseTokenBridge(uint256)"(
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createNewChain(
      _chainId: BigNumberish,
      _stateTransitionManager: string,
      _baseToken: string,
      _baseTokenBridge: string,
      _salt: BigNumberish,
      _governor: string,
      _initData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createNewChain(uint256,address,address,address,uint256,address,bytes)"(
      _chainId: BigNumberish,
      _stateTransitionManager: string,
      _baseToken: string,
      _baseTokenBridge: string,
      _salt: BigNumberish,
      _governor: string,
      _initData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getStateTransition(
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getStateTransition(uint256)"(
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    l2TransactionBaseCost(
      _chainId: BigNumberish,
      _gasPrice: BigNumberish,
      _l2GasLimit: BigNumberish,
      _l2GasPerPubdataByteLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "l2TransactionBaseCost(uint256,uint256,uint256,uint256)"(
      _chainId: BigNumberish,
      _gasPrice: BigNumberish,
      _l2GasLimit: BigNumberish,
      _l2GasPerPubdataByteLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proveL1ToL2TransactionStatus(
      _chainId: BigNumberish,
      _l2TxHash: BytesLike,
      _l2BatchNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBatch: BigNumberish,
      _merkleProof: BytesLike[],
      _status: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "proveL1ToL2TransactionStatus(uint256,bytes32,uint256,uint256,uint16,bytes32[],uint8)"(
      _chainId: BigNumberish,
      _l2TxHash: BytesLike,
      _l2BatchNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBatch: BigNumberish,
      _merkleProof: BytesLike[],
      _status: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proveL2LogInclusion(
      _chainId: BigNumberish,
      _batchNumber: BigNumberish,
      _index: BigNumberish,
      _log: {
        l2ShardId: BigNumberish;
        isService: boolean;
        txNumberInBatch: BigNumberish;
        sender: string;
        key: BytesLike;
        value: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "proveL2LogInclusion(uint256,uint256,uint256,tuple,bytes32[])"(
      _chainId: BigNumberish,
      _batchNumber: BigNumberish,
      _index: BigNumberish,
      _log: {
        l2ShardId: BigNumberish;
        isService: boolean;
        txNumberInBatch: BigNumberish;
        sender: string;
        key: BytesLike;
        value: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proveL2MessageInclusion(
      _chainId: BigNumberish,
      _batchNumber: BigNumberish,
      _index: BigNumberish,
      _message: {
        txNumberInBatch: BigNumberish;
        sender: string;
        data: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "proveL2MessageInclusion(uint256,uint256,uint256,tuple,bytes32[])"(
      _chainId: BigNumberish,
      _batchNumber: BigNumberish,
      _index: BigNumberish,
      _message: {
        txNumberInBatch: BigNumberish;
        sender: string;
        data: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeStateTransitionManager(
      _stateTransitionManager: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeStateTransitionManager(address)"(
      _stateTransitionManager: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    requestL2Transaction(
      _request: {
        chainId: BigNumberish;
        mintValue: BigNumberish;
        l2Contract: string;
        l2Value: BigNumberish;
        l2Calldata: BytesLike;
        l2GasLimit: BigNumberish;
        l2GasPerPubdataByteLimit: BigNumberish;
        factoryDeps: BytesLike[];
        refundRecipient: string;
      },
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "requestL2Transaction(tuple)"(
      _request: {
        chainId: BigNumberish;
        mintValue: BigNumberish;
        l2Contract: string;
        l2Value: BigNumberish;
        l2Calldata: BytesLike;
        l2GasLimit: BigNumberish;
        l2GasPerPubdataByteLimit: BigNumberish;
        factoryDeps: BytesLike[];
        refundRecipient: string;
      },
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    requestL2TransactionTwoBridges(
      _request: {
        chainId: BigNumberish;
        mintValue: BigNumberish;
        l2Value: BigNumberish;
        l2GasLimit: BigNumberish;
        l2GasPerPubdataByteLimit: BigNumberish;
        refundRecipient: string;
        secondBridgeAddress: string;
        secondBridgeValue: BigNumberish;
        secondBridgeCalldata: BytesLike;
      },
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "requestL2TransactionTwoBridges(tuple)"(
      _request: {
        chainId: BigNumberish;
        mintValue: BigNumberish;
        l2Value: BigNumberish;
        l2GasLimit: BigNumberish;
        l2GasPerPubdataByteLimit: BigNumberish;
        refundRecipient: string;
        secondBridgeAddress: string;
        secondBridgeValue: BigNumberish;
        secondBridgeCalldata: BytesLike;
      },
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    setWethBridge(
      _wethBridge: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setWethBridge(address)"(
      _wethBridge: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    stateTransitionManager(
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "stateTransitionManager(uint256)"(
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stateTransitionManagerIsRegistered(
      _stateTransitionManager: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "stateTransitionManagerIsRegistered(address)"(
      _stateTransitionManager: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenBridgeIsRegistered(
      _baseTokenBridge: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenBridgeIsRegistered(address)"(
      _baseTokenBridge: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenIsRegistered(
      _baseToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenIsRegistered(address)"(
      _baseToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    wethBridge(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "wethBridge()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
