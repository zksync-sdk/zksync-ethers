/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface Il1SharedBridgeInterface extends ethers.utils.Interface {
  functions: {
    "acceptOwnership()": FunctionFragment;
    "bridgehub()": FunctionFragment;
    "bridgehubConfirmL2Transaction(uint256,bytes32,bytes32)": FunctionFragment;
    "bridgehubDeposit(uint256,address,uint256,bytes)": FunctionFragment;
    "bridgehubDepositBaseToken(uint256,address,address,uint256)": FunctionFragment;
    "claimFailedDeposit(uint256,address,address,uint256,bytes32,uint256,uint256,uint16,bytes32[])": FunctionFragment;
    "claimFailedDepositLegacyErc20Bridge(address,address,uint256,bytes32,uint256,uint256,uint16,bytes32[])": FunctionFragment;
    "depositHappened(uint256,bytes32)": FunctionFragment;
    "depositLegacyErc20Bridge(address,address,address,uint256,uint256,uint256,address)": FunctionFragment;
    "finalizeWithdrawal(uint256,uint256,uint256,uint16,bytes,bytes32[])": FunctionFragment;
    "finalizeWithdrawalLegacyErc20Bridge(uint256,uint256,uint16,bytes,bytes32[])": FunctionFragment;
    "initialize(address,uint256)": FunctionFragment;
    "initializeChainGovernance(uint256,address)": FunctionFragment;
    "isWithdrawalFinalizedShared(uint256,uint256,uint256)": FunctionFragment;
    "l1WethAddress()": FunctionFragment;
    "l2BridgeAddress(uint256)": FunctionFragment;
    "legacyBridge()": FunctionFragment;
    "owner()": FunctionFragment;
    "pendingOwner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "bridgehub", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "bridgehubConfirmL2Transaction",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "bridgehubDeposit",
    values: [BigNumberish, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "bridgehubDepositBaseToken",
    values: [BigNumberish, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimFailedDeposit",
    values: [
      BigNumberish,
      string,
      string,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claimFailedDepositLegacyErc20Bridge",
    values: [
      string,
      string,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositHappened",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "depositLegacyErc20Bridge",
    values: [
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeWithdrawal",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeWithdrawalLegacyErc20Bridge",
    values: [BigNumberish, BigNumberish, BigNumberish, BytesLike, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeChainGovernance",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isWithdrawalFinalizedShared",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "l1WethAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "l2BridgeAddress",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "legacyBridge",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bridgehub", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bridgehubConfirmL2Transaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bridgehubDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bridgehubDepositBaseToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimFailedDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimFailedDepositLegacyErc20Bridge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositHappened",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositLegacyErc20Bridge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizeWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizeWithdrawalLegacyErc20Bridge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initializeChainGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWithdrawalFinalizedShared",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "l1WethAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "l2BridgeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "legacyBridge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "BridgehubDepositFinalized(uint256,bytes32,bytes32)": EventFragment;
    "BridgehubDepositInitiatedSharedBridge(uint256,bytes32,address,address,address,uint256)": EventFragment;
    "ClaimedFailedDepositSharedBridge(uint256,address,address,uint256)": EventFragment;
    "DepositInitiatedSharedBridge(uint256,bytes32,address,address,address,uint256)": EventFragment;
    "EthReceived(uint256)": EventFragment;
    "EthWithdrawalFinalized(uint256,address,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferStarted(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "WithdrawalFinalizedSharedBridge(uint256,address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BridgehubDepositFinalized"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "BridgehubDepositInitiatedSharedBridge"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ClaimedFailedDepositSharedBridge"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "DepositInitiatedSharedBridge"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EthReceived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EthWithdrawalFinalized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "WithdrawalFinalizedSharedBridge"
  ): EventFragment;
}

export class Il1SharedBridge extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: Il1SharedBridgeInterface;

  functions: {
    acceptOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "acceptOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    bridgehub(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "bridgehub()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    bridgehubConfirmL2Transaction(
      _chainId: BigNumberish,
      _txDataHash: BytesLike,
      _txHash: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "bridgehubConfirmL2Transaction(uint256,bytes32,bytes32)"(
      _chainId: BigNumberish,
      _txDataHash: BytesLike,
      _txHash: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    bridgehubDeposit(
      _chainId: BigNumberish,
      _prevMsgSender: string,
      arg2: BigNumberish,
      _data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "bridgehubDeposit(uint256,address,uint256,bytes)"(
      _chainId: BigNumberish,
      _prevMsgSender: string,
      arg2: BigNumberish,
      _data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    bridgehubDepositBaseToken(
      _chainId: BigNumberish,
      _prevMsgSender: string,
      _l1Token: string,
      _amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "bridgehubDepositBaseToken(uint256,address,address,uint256)"(
      _chainId: BigNumberish,
      _prevMsgSender: string,
      _l1Token: string,
      _amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    claimFailedDeposit(
      _chainId: BigNumberish,
      _depositSender: string,
      _l1Token: string,
      _amount: BigNumberish,
      _l2TxHash: BytesLike,
      _l2BatchNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBatch: BigNumberish,
      _merkleProof: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "claimFailedDeposit(uint256,address,address,uint256,bytes32,uint256,uint256,uint16,bytes32[])"(
      _chainId: BigNumberish,
      _depositSender: string,
      _l1Token: string,
      _amount: BigNumberish,
      _l2TxHash: BytesLike,
      _l2BatchNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBatch: BigNumberish,
      _merkleProof: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    claimFailedDepositLegacyErc20Bridge(
      _depositSender: string,
      _l1Token: string,
      _amount: BigNumberish,
      _l2TxHash: BytesLike,
      _l2BatchNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBatch: BigNumberish,
      _merkleProof: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "claimFailedDepositLegacyErc20Bridge(address,address,uint256,bytes32,uint256,uint256,uint16,bytes32[])"(
      _depositSender: string,
      _l1Token: string,
      _amount: BigNumberish,
      _l2TxHash: BytesLike,
      _l2BatchNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBatch: BigNumberish,
      _merkleProof: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    depositHappened(
      chainId: BigNumberish,
      l2DepositTxHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      depositDataHash: string;
      0: string;
    }>;

    "depositHappened(uint256,bytes32)"(
      chainId: BigNumberish,
      l2DepositTxHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      depositDataHash: string;
      0: string;
    }>;

    depositLegacyErc20Bridge(
      _msgSender: string,
      _l2Receiver: string,
      _l1Token: string,
      _amount: BigNumberish,
      _l2TxGasLimit: BigNumberish,
      _l2TxGasPerPubdataByte: BigNumberish,
      _refundRecipient: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "depositLegacyErc20Bridge(address,address,address,uint256,uint256,uint256,address)"(
      _msgSender: string,
      _l2Receiver: string,
      _l1Token: string,
      _amount: BigNumberish,
      _l2TxGasLimit: BigNumberish,
      _l2TxGasPerPubdataByte: BigNumberish,
      _refundRecipient: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    finalizeWithdrawal(
      _chainId: BigNumberish,
      _l2BatchNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBatch: BigNumberish,
      _message: BytesLike,
      _merkleProof: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "finalizeWithdrawal(uint256,uint256,uint256,uint16,bytes,bytes32[])"(
      _chainId: BigNumberish,
      _l2BatchNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBatch: BigNumberish,
      _message: BytesLike,
      _merkleProof: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    finalizeWithdrawalLegacyErc20Bridge(
      _l2BatchNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBatch: BigNumberish,
      _message: BytesLike,
      _merkleProof: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "finalizeWithdrawalLegacyErc20Bridge(uint256,uint256,uint16,bytes,bytes32[])"(
      _l2BatchNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBatch: BigNumberish,
      _message: BytesLike,
      _merkleProof: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    initialize(
      _owner: string,
      _eraIsEthWithdrawalFinalizedStorageSwitchBatchNumber: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address,uint256)"(
      _owner: string,
      _eraIsEthWithdrawalFinalizedStorageSwitchBatchNumber: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    initializeChainGovernance(
      _chainId: BigNumberish,
      _l2BridgeAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initializeChainGovernance(uint256,address)"(
      _chainId: BigNumberish,
      _l2BridgeAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    isWithdrawalFinalizedShared(
      chainId: BigNumberish,
      l2BatchNumber: BigNumberish,
      l2ToL1MessageNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      isFinalized: boolean;
      0: boolean;
    }>;

    "isWithdrawalFinalizedShared(uint256,uint256,uint256)"(
      chainId: BigNumberish,
      l2BatchNumber: BigNumberish,
      l2ToL1MessageNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      isFinalized: boolean;
      0: boolean;
    }>;

    l1WethAddress(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "l1WethAddress()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    l2BridgeAddress(
      chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      l2Bridge: string;
      0: string;
    }>;

    "l2BridgeAddress(uint256)"(
      chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      l2Bridge: string;
      0: string;
    }>;

    legacyBridge(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "legacyBridge()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    owner(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "owner()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    pendingOwner(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "pendingOwner()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  acceptOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "acceptOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  bridgehub(overrides?: CallOverrides): Promise<string>;

  "bridgehub()"(overrides?: CallOverrides): Promise<string>;

  bridgehubConfirmL2Transaction(
    _chainId: BigNumberish,
    _txDataHash: BytesLike,
    _txHash: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "bridgehubConfirmL2Transaction(uint256,bytes32,bytes32)"(
    _chainId: BigNumberish,
    _txDataHash: BytesLike,
    _txHash: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  bridgehubDeposit(
    _chainId: BigNumberish,
    _prevMsgSender: string,
    arg2: BigNumberish,
    _data: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "bridgehubDeposit(uint256,address,uint256,bytes)"(
    _chainId: BigNumberish,
    _prevMsgSender: string,
    arg2: BigNumberish,
    _data: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  bridgehubDepositBaseToken(
    _chainId: BigNumberish,
    _prevMsgSender: string,
    _l1Token: string,
    _amount: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "bridgehubDepositBaseToken(uint256,address,address,uint256)"(
    _chainId: BigNumberish,
    _prevMsgSender: string,
    _l1Token: string,
    _amount: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  claimFailedDeposit(
    _chainId: BigNumberish,
    _depositSender: string,
    _l1Token: string,
    _amount: BigNumberish,
    _l2TxHash: BytesLike,
    _l2BatchNumber: BigNumberish,
    _l2MessageIndex: BigNumberish,
    _l2TxNumberInBatch: BigNumberish,
    _merkleProof: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "claimFailedDeposit(uint256,address,address,uint256,bytes32,uint256,uint256,uint16,bytes32[])"(
    _chainId: BigNumberish,
    _depositSender: string,
    _l1Token: string,
    _amount: BigNumberish,
    _l2TxHash: BytesLike,
    _l2BatchNumber: BigNumberish,
    _l2MessageIndex: BigNumberish,
    _l2TxNumberInBatch: BigNumberish,
    _merkleProof: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  claimFailedDepositLegacyErc20Bridge(
    _depositSender: string,
    _l1Token: string,
    _amount: BigNumberish,
    _l2TxHash: BytesLike,
    _l2BatchNumber: BigNumberish,
    _l2MessageIndex: BigNumberish,
    _l2TxNumberInBatch: BigNumberish,
    _merkleProof: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "claimFailedDepositLegacyErc20Bridge(address,address,uint256,bytes32,uint256,uint256,uint16,bytes32[])"(
    _depositSender: string,
    _l1Token: string,
    _amount: BigNumberish,
    _l2TxHash: BytesLike,
    _l2BatchNumber: BigNumberish,
    _l2MessageIndex: BigNumberish,
    _l2TxNumberInBatch: BigNumberish,
    _merkleProof: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  depositHappened(
    chainId: BigNumberish,
    l2DepositTxHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "depositHappened(uint256,bytes32)"(
    chainId: BigNumberish,
    l2DepositTxHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  depositLegacyErc20Bridge(
    _msgSender: string,
    _l2Receiver: string,
    _l1Token: string,
    _amount: BigNumberish,
    _l2TxGasLimit: BigNumberish,
    _l2TxGasPerPubdataByte: BigNumberish,
    _refundRecipient: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "depositLegacyErc20Bridge(address,address,address,uint256,uint256,uint256,address)"(
    _msgSender: string,
    _l2Receiver: string,
    _l1Token: string,
    _amount: BigNumberish,
    _l2TxGasLimit: BigNumberish,
    _l2TxGasPerPubdataByte: BigNumberish,
    _refundRecipient: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  finalizeWithdrawal(
    _chainId: BigNumberish,
    _l2BatchNumber: BigNumberish,
    _l2MessageIndex: BigNumberish,
    _l2TxNumberInBatch: BigNumberish,
    _message: BytesLike,
    _merkleProof: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "finalizeWithdrawal(uint256,uint256,uint256,uint16,bytes,bytes32[])"(
    _chainId: BigNumberish,
    _l2BatchNumber: BigNumberish,
    _l2MessageIndex: BigNumberish,
    _l2TxNumberInBatch: BigNumberish,
    _message: BytesLike,
    _merkleProof: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  finalizeWithdrawalLegacyErc20Bridge(
    _l2BatchNumber: BigNumberish,
    _l2MessageIndex: BigNumberish,
    _l2TxNumberInBatch: BigNumberish,
    _message: BytesLike,
    _merkleProof: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "finalizeWithdrawalLegacyErc20Bridge(uint256,uint256,uint16,bytes,bytes32[])"(
    _l2BatchNumber: BigNumberish,
    _l2MessageIndex: BigNumberish,
    _l2TxNumberInBatch: BigNumberish,
    _message: BytesLike,
    _merkleProof: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  initialize(
    _owner: string,
    _eraIsEthWithdrawalFinalizedStorageSwitchBatchNumber: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address,uint256)"(
    _owner: string,
    _eraIsEthWithdrawalFinalizedStorageSwitchBatchNumber: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  initializeChainGovernance(
    _chainId: BigNumberish,
    _l2BridgeAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initializeChainGovernance(uint256,address)"(
    _chainId: BigNumberish,
    _l2BridgeAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  isWithdrawalFinalizedShared(
    chainId: BigNumberish,
    l2BatchNumber: BigNumberish,
    l2ToL1MessageNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isWithdrawalFinalizedShared(uint256,uint256,uint256)"(
    chainId: BigNumberish,
    l2BatchNumber: BigNumberish,
    l2ToL1MessageNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  l1WethAddress(overrides?: CallOverrides): Promise<string>;

  "l1WethAddress()"(overrides?: CallOverrides): Promise<string>;

  l2BridgeAddress(
    chainId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "l2BridgeAddress(uint256)"(
    chainId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  legacyBridge(overrides?: CallOverrides): Promise<string>;

  "legacyBridge()"(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  pendingOwner(overrides?: CallOverrides): Promise<string>;

  "pendingOwner()"(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    "acceptOwnership()"(overrides?: CallOverrides): Promise<void>;

    bridgehub(overrides?: CallOverrides): Promise<string>;

    "bridgehub()"(overrides?: CallOverrides): Promise<string>;

    bridgehubConfirmL2Transaction(
      _chainId: BigNumberish,
      _txDataHash: BytesLike,
      _txHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "bridgehubConfirmL2Transaction(uint256,bytes32,bytes32)"(
      _chainId: BigNumberish,
      _txDataHash: BytesLike,
      _txHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    bridgehubDeposit(
      _chainId: BigNumberish,
      _prevMsgSender: string,
      arg2: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      magicValue: string;
      l2Contract: string;
      l2Calldata: string;
      factoryDeps: string[];
      txDataHash: string;
      0: string;
      1: string;
      2: string;
      3: string[];
      4: string;
    }>;

    "bridgehubDeposit(uint256,address,uint256,bytes)"(
      _chainId: BigNumberish,
      _prevMsgSender: string,
      arg2: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      magicValue: string;
      l2Contract: string;
      l2Calldata: string;
      factoryDeps: string[];
      txDataHash: string;
      0: string;
      1: string;
      2: string;
      3: string[];
      4: string;
    }>;

    bridgehubDepositBaseToken(
      _chainId: BigNumberish,
      _prevMsgSender: string,
      _l1Token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "bridgehubDepositBaseToken(uint256,address,address,uint256)"(
      _chainId: BigNumberish,
      _prevMsgSender: string,
      _l1Token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimFailedDeposit(
      _chainId: BigNumberish,
      _depositSender: string,
      _l1Token: string,
      _amount: BigNumberish,
      _l2TxHash: BytesLike,
      _l2BatchNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBatch: BigNumberish,
      _merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    "claimFailedDeposit(uint256,address,address,uint256,bytes32,uint256,uint256,uint16,bytes32[])"(
      _chainId: BigNumberish,
      _depositSender: string,
      _l1Token: string,
      _amount: BigNumberish,
      _l2TxHash: BytesLike,
      _l2BatchNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBatch: BigNumberish,
      _merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    claimFailedDepositLegacyErc20Bridge(
      _depositSender: string,
      _l1Token: string,
      _amount: BigNumberish,
      _l2TxHash: BytesLike,
      _l2BatchNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBatch: BigNumberish,
      _merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    "claimFailedDepositLegacyErc20Bridge(address,address,uint256,bytes32,uint256,uint256,uint16,bytes32[])"(
      _depositSender: string,
      _l1Token: string,
      _amount: BigNumberish,
      _l2TxHash: BytesLike,
      _l2BatchNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBatch: BigNumberish,
      _merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    depositHappened(
      chainId: BigNumberish,
      l2DepositTxHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "depositHappened(uint256,bytes32)"(
      chainId: BigNumberish,
      l2DepositTxHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    depositLegacyErc20Bridge(
      _msgSender: string,
      _l2Receiver: string,
      _l1Token: string,
      _amount: BigNumberish,
      _l2TxGasLimit: BigNumberish,
      _l2TxGasPerPubdataByte: BigNumberish,
      _refundRecipient: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "depositLegacyErc20Bridge(address,address,address,uint256,uint256,uint256,address)"(
      _msgSender: string,
      _l2Receiver: string,
      _l1Token: string,
      _amount: BigNumberish,
      _l2TxGasLimit: BigNumberish,
      _l2TxGasPerPubdataByte: BigNumberish,
      _refundRecipient: string,
      overrides?: CallOverrides
    ): Promise<string>;

    finalizeWithdrawal(
      _chainId: BigNumberish,
      _l2BatchNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBatch: BigNumberish,
      _message: BytesLike,
      _merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    "finalizeWithdrawal(uint256,uint256,uint256,uint16,bytes,bytes32[])"(
      _chainId: BigNumberish,
      _l2BatchNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBatch: BigNumberish,
      _message: BytesLike,
      _merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    finalizeWithdrawalLegacyErc20Bridge(
      _l2BatchNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBatch: BigNumberish,
      _message: BytesLike,
      _merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: string;
      2: BigNumber;
    }>;

    "finalizeWithdrawalLegacyErc20Bridge(uint256,uint256,uint16,bytes,bytes32[])"(
      _l2BatchNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBatch: BigNumberish,
      _message: BytesLike,
      _merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: string;
      2: BigNumber;
    }>;

    initialize(
      _owner: string,
      _eraIsEthWithdrawalFinalizedStorageSwitchBatchNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,uint256)"(
      _owner: string,
      _eraIsEthWithdrawalFinalizedStorageSwitchBatchNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    initializeChainGovernance(
      _chainId: BigNumberish,
      _l2BridgeAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initializeChainGovernance(uint256,address)"(
      _chainId: BigNumberish,
      _l2BridgeAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isWithdrawalFinalizedShared(
      chainId: BigNumberish,
      l2BatchNumber: BigNumberish,
      l2ToL1MessageNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isWithdrawalFinalizedShared(uint256,uint256,uint256)"(
      chainId: BigNumberish,
      l2BatchNumber: BigNumberish,
      l2ToL1MessageNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    l1WethAddress(overrides?: CallOverrides): Promise<string>;

    "l1WethAddress()"(overrides?: CallOverrides): Promise<string>;

    l2BridgeAddress(
      chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "l2BridgeAddress(uint256)"(
      chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    legacyBridge(overrides?: CallOverrides): Promise<string>;

    "legacyBridge()"(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    pendingOwner(overrides?: CallOverrides): Promise<string>;

    "pendingOwner()"(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    BridgehubDepositFinalized(
      chainId: BigNumberish | null,
      txDataHash: BytesLike | null,
      l2DepositTxHash: BytesLike | null
    ): EventFilter;

    BridgehubDepositInitiatedSharedBridge(
      chainId: BigNumberish | null,
      txDataHash: BytesLike | null,
      from: string | null,
      to: null,
      l1Token: null,
      amount: null
    ): EventFilter;

    ClaimedFailedDepositSharedBridge(
      chainId: BigNumberish | null,
      to: string | null,
      l1Token: string | null,
      amount: null
    ): EventFilter;

    DepositInitiatedSharedBridge(
      chainId: BigNumberish | null,
      l2DepositTxHash: BytesLike | null,
      from: string | null,
      to: null,
      l1Token: null,
      amount: null
    ): EventFilter;

    EthReceived(amount: null): EventFilter;

    EthWithdrawalFinalized(
      chainId: null,
      to: string | null,
      amount: null
    ): EventFilter;

    Initialized(version: null): EventFilter;

    OwnershipTransferStarted(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    WithdrawalFinalizedSharedBridge(
      chainId: BigNumberish | null,
      to: string | null,
      l1Token: string | null,
      amount: null
    ): EventFilter;
  };

  estimateGas: {
    acceptOwnership(overrides?: Overrides): Promise<BigNumber>;

    "acceptOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    bridgehub(overrides?: CallOverrides): Promise<BigNumber>;

    "bridgehub()"(overrides?: CallOverrides): Promise<BigNumber>;

    bridgehubConfirmL2Transaction(
      _chainId: BigNumberish,
      _txDataHash: BytesLike,
      _txHash: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "bridgehubConfirmL2Transaction(uint256,bytes32,bytes32)"(
      _chainId: BigNumberish,
      _txDataHash: BytesLike,
      _txHash: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    bridgehubDeposit(
      _chainId: BigNumberish,
      _prevMsgSender: string,
      arg2: BigNumberish,
      _data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "bridgehubDeposit(uint256,address,uint256,bytes)"(
      _chainId: BigNumberish,
      _prevMsgSender: string,
      arg2: BigNumberish,
      _data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    bridgehubDepositBaseToken(
      _chainId: BigNumberish,
      _prevMsgSender: string,
      _l1Token: string,
      _amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "bridgehubDepositBaseToken(uint256,address,address,uint256)"(
      _chainId: BigNumberish,
      _prevMsgSender: string,
      _l1Token: string,
      _amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    claimFailedDeposit(
      _chainId: BigNumberish,
      _depositSender: string,
      _l1Token: string,
      _amount: BigNumberish,
      _l2TxHash: BytesLike,
      _l2BatchNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBatch: BigNumberish,
      _merkleProof: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "claimFailedDeposit(uint256,address,address,uint256,bytes32,uint256,uint256,uint16,bytes32[])"(
      _chainId: BigNumberish,
      _depositSender: string,
      _l1Token: string,
      _amount: BigNumberish,
      _l2TxHash: BytesLike,
      _l2BatchNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBatch: BigNumberish,
      _merkleProof: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    claimFailedDepositLegacyErc20Bridge(
      _depositSender: string,
      _l1Token: string,
      _amount: BigNumberish,
      _l2TxHash: BytesLike,
      _l2BatchNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBatch: BigNumberish,
      _merkleProof: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "claimFailedDepositLegacyErc20Bridge(address,address,uint256,bytes32,uint256,uint256,uint16,bytes32[])"(
      _depositSender: string,
      _l1Token: string,
      _amount: BigNumberish,
      _l2TxHash: BytesLike,
      _l2BatchNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBatch: BigNumberish,
      _merkleProof: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    depositHappened(
      chainId: BigNumberish,
      l2DepositTxHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "depositHappened(uint256,bytes32)"(
      chainId: BigNumberish,
      l2DepositTxHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositLegacyErc20Bridge(
      _msgSender: string,
      _l2Receiver: string,
      _l1Token: string,
      _amount: BigNumberish,
      _l2TxGasLimit: BigNumberish,
      _l2TxGasPerPubdataByte: BigNumberish,
      _refundRecipient: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "depositLegacyErc20Bridge(address,address,address,uint256,uint256,uint256,address)"(
      _msgSender: string,
      _l2Receiver: string,
      _l1Token: string,
      _amount: BigNumberish,
      _l2TxGasLimit: BigNumberish,
      _l2TxGasPerPubdataByte: BigNumberish,
      _refundRecipient: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    finalizeWithdrawal(
      _chainId: BigNumberish,
      _l2BatchNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBatch: BigNumberish,
      _message: BytesLike,
      _merkleProof: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "finalizeWithdrawal(uint256,uint256,uint256,uint16,bytes,bytes32[])"(
      _chainId: BigNumberish,
      _l2BatchNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBatch: BigNumberish,
      _message: BytesLike,
      _merkleProof: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    finalizeWithdrawalLegacyErc20Bridge(
      _l2BatchNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBatch: BigNumberish,
      _message: BytesLike,
      _merkleProof: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "finalizeWithdrawalLegacyErc20Bridge(uint256,uint256,uint16,bytes,bytes32[])"(
      _l2BatchNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBatch: BigNumberish,
      _message: BytesLike,
      _merkleProof: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    initialize(
      _owner: string,
      _eraIsEthWithdrawalFinalizedStorageSwitchBatchNumber: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address,uint256)"(
      _owner: string,
      _eraIsEthWithdrawalFinalizedStorageSwitchBatchNumber: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    initializeChainGovernance(
      _chainId: BigNumberish,
      _l2BridgeAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initializeChainGovernance(uint256,address)"(
      _chainId: BigNumberish,
      _l2BridgeAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    isWithdrawalFinalizedShared(
      chainId: BigNumberish,
      l2BatchNumber: BigNumberish,
      l2ToL1MessageNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isWithdrawalFinalizedShared(uint256,uint256,uint256)"(
      chainId: BigNumberish,
      l2BatchNumber: BigNumberish,
      l2ToL1MessageNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    l1WethAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "l1WethAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    l2BridgeAddress(
      chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "l2BridgeAddress(uint256)"(
      chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    legacyBridge(overrides?: CallOverrides): Promise<BigNumber>;

    "legacyBridge()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    pendingOwner(overrides?: CallOverrides): Promise<BigNumber>;

    "pendingOwner()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "acceptOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    bridgehub(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "bridgehub()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bridgehubConfirmL2Transaction(
      _chainId: BigNumberish,
      _txDataHash: BytesLike,
      _txHash: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "bridgehubConfirmL2Transaction(uint256,bytes32,bytes32)"(
      _chainId: BigNumberish,
      _txDataHash: BytesLike,
      _txHash: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    bridgehubDeposit(
      _chainId: BigNumberish,
      _prevMsgSender: string,
      arg2: BigNumberish,
      _data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "bridgehubDeposit(uint256,address,uint256,bytes)"(
      _chainId: BigNumberish,
      _prevMsgSender: string,
      arg2: BigNumberish,
      _data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    bridgehubDepositBaseToken(
      _chainId: BigNumberish,
      _prevMsgSender: string,
      _l1Token: string,
      _amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "bridgehubDepositBaseToken(uint256,address,address,uint256)"(
      _chainId: BigNumberish,
      _prevMsgSender: string,
      _l1Token: string,
      _amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    claimFailedDeposit(
      _chainId: BigNumberish,
      _depositSender: string,
      _l1Token: string,
      _amount: BigNumberish,
      _l2TxHash: BytesLike,
      _l2BatchNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBatch: BigNumberish,
      _merkleProof: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "claimFailedDeposit(uint256,address,address,uint256,bytes32,uint256,uint256,uint16,bytes32[])"(
      _chainId: BigNumberish,
      _depositSender: string,
      _l1Token: string,
      _amount: BigNumberish,
      _l2TxHash: BytesLike,
      _l2BatchNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBatch: BigNumberish,
      _merkleProof: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    claimFailedDepositLegacyErc20Bridge(
      _depositSender: string,
      _l1Token: string,
      _amount: BigNumberish,
      _l2TxHash: BytesLike,
      _l2BatchNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBatch: BigNumberish,
      _merkleProof: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "claimFailedDepositLegacyErc20Bridge(address,address,uint256,bytes32,uint256,uint256,uint16,bytes32[])"(
      _depositSender: string,
      _l1Token: string,
      _amount: BigNumberish,
      _l2TxHash: BytesLike,
      _l2BatchNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBatch: BigNumberish,
      _merkleProof: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    depositHappened(
      chainId: BigNumberish,
      l2DepositTxHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "depositHappened(uint256,bytes32)"(
      chainId: BigNumberish,
      l2DepositTxHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositLegacyErc20Bridge(
      _msgSender: string,
      _l2Receiver: string,
      _l1Token: string,
      _amount: BigNumberish,
      _l2TxGasLimit: BigNumberish,
      _l2TxGasPerPubdataByte: BigNumberish,
      _refundRecipient: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "depositLegacyErc20Bridge(address,address,address,uint256,uint256,uint256,address)"(
      _msgSender: string,
      _l2Receiver: string,
      _l1Token: string,
      _amount: BigNumberish,
      _l2TxGasLimit: BigNumberish,
      _l2TxGasPerPubdataByte: BigNumberish,
      _refundRecipient: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    finalizeWithdrawal(
      _chainId: BigNumberish,
      _l2BatchNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBatch: BigNumberish,
      _message: BytesLike,
      _merkleProof: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "finalizeWithdrawal(uint256,uint256,uint256,uint16,bytes,bytes32[])"(
      _chainId: BigNumberish,
      _l2BatchNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBatch: BigNumberish,
      _message: BytesLike,
      _merkleProof: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    finalizeWithdrawalLegacyErc20Bridge(
      _l2BatchNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBatch: BigNumberish,
      _message: BytesLike,
      _merkleProof: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "finalizeWithdrawalLegacyErc20Bridge(uint256,uint256,uint16,bytes,bytes32[])"(
      _l2BatchNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBatch: BigNumberish,
      _message: BytesLike,
      _merkleProof: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _owner: string,
      _eraIsEthWithdrawalFinalizedStorageSwitchBatchNumber: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,uint256)"(
      _owner: string,
      _eraIsEthWithdrawalFinalizedStorageSwitchBatchNumber: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    initializeChainGovernance(
      _chainId: BigNumberish,
      _l2BridgeAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initializeChainGovernance(uint256,address)"(
      _chainId: BigNumberish,
      _l2BridgeAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    isWithdrawalFinalizedShared(
      chainId: BigNumberish,
      l2BatchNumber: BigNumberish,
      l2ToL1MessageNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isWithdrawalFinalizedShared(uint256,uint256,uint256)"(
      chainId: BigNumberish,
      l2BatchNumber: BigNumberish,
      l2ToL1MessageNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    l1WethAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "l1WethAddress()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    l2BridgeAddress(
      chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "l2BridgeAddress(uint256)"(
      chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    legacyBridge(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "legacyBridge()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "pendingOwner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
