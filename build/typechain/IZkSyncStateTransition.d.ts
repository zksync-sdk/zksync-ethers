/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IZkSyncStateTransitionInterface extends ethers.utils.Interface {
  functions: {
    "bridgehub()": FunctionFragment;
    "genesisUpgrade()": FunctionFragment;
    "getName()": FunctionFragment;
    "governor()": FunctionFragment;
    "initialCutHash()": FunctionFragment;
    "initialize(tuple)": FunctionFragment;
    "newChain(uint256,address,address,address,bytes)": FunctionFragment;
    "protocolVersion()": FunctionFragment;
    "setNewVersionUpgrade(tuple,uint256,uint256)": FunctionFragment;
    "setUpgradeDiamondCut(tuple,uint256)": FunctionFragment;
    "stateTransitionChain(uint256)": FunctionFragment;
    "storedBatchZero()": FunctionFragment;
    "totalChains()": FunctionFragment;
    "upgradeChainFromVersion(uint256,uint256,tuple)": FunctionFragment;
    "upgradeCutHash(uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "bridgehub", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "genesisUpgrade",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getName", values?: undefined): string;
  encodeFunctionData(functionFragment: "governor", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialCutHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      {
        governor: string;
        genesisUpgrade: string;
        genesisBatchHash: BytesLike;
        genesisIndexRepeatedStorageChanges: BigNumberish;
        genesisBatchCommitment: BytesLike;
        diamondCut: {
          facetCuts: {
            facet: string;
            action: BigNumberish;
            isFreezable: boolean;
            selectors: BytesLike[];
          }[];
          initAddress: string;
          initCalldata: BytesLike;
        };
        protocolVersion: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "newChain",
    values: [BigNumberish, string, string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setNewVersionUpgrade",
    values: [
      {
        facetCuts: {
          facet: string;
          action: BigNumberish;
          isFreezable: boolean;
          selectors: BytesLike[];
        }[];
        initAddress: string;
        initCalldata: BytesLike;
      },
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setUpgradeDiamondCut",
    values: [
      {
        facetCuts: {
          facet: string;
          action: BigNumberish;
          isFreezable: boolean;
          selectors: BytesLike[];
        }[];
        initAddress: string;
        initCalldata: BytesLike;
      },
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "stateTransitionChain",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "storedBatchZero",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalChains",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeChainFromVersion",
    values: [
      BigNumberish,
      BigNumberish,
      {
        facetCuts: {
          facet: string;
          action: BigNumberish;
          isFreezable: boolean;
          selectors: BytesLike[];
        }[];
        initAddress: string;
        initCalldata: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeCutHash",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "bridgehub", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "genesisUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getName", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "governor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initialCutHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "newChain", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "protocolVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNewVersionUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUpgradeDiamondCut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stateTransitionChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "storedBatchZero",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalChains",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeChainFromVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeCutHash",
    data: BytesLike
  ): Result;

  events: {
    "StateTransitionNewChain(uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "StateTransitionNewChain"): EventFragment;
}

export class IZkSyncStateTransition extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IZkSyncStateTransitionInterface;

  functions: {
    bridgehub(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "bridgehub()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    genesisUpgrade(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "genesisUpgrade()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    getName(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "getName()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    governor(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "governor()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    initialCutHash(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "initialCutHash()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    initialize(
      _initalizeData: {
        governor: string;
        genesisUpgrade: string;
        genesisBatchHash: BytesLike;
        genesisIndexRepeatedStorageChanges: BigNumberish;
        genesisBatchCommitment: BytesLike;
        diamondCut: {
          facetCuts: {
            facet: string;
            action: BigNumberish;
            isFreezable: boolean;
            selectors: BytesLike[];
          }[];
          initAddress: string;
          initCalldata: BytesLike;
        };
        protocolVersion: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(tuple)"(
      _initalizeData: {
        governor: string;
        genesisUpgrade: string;
        genesisBatchHash: BytesLike;
        genesisIndexRepeatedStorageChanges: BigNumberish;
        genesisBatchCommitment: BytesLike;
        diamondCut: {
          facetCuts: {
            facet: string;
            action: BigNumberish;
            isFreezable: boolean;
            selectors: BytesLike[];
          }[];
          initAddress: string;
          initCalldata: BytesLike;
        };
        protocolVersion: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    newChain(
      _chainId: BigNumberish,
      _baseToken: string,
      _baseTokenBridge: string,
      _governor: string,
      _diamondCut: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "newChain(uint256,address,address,address,bytes)"(
      _chainId: BigNumberish,
      _baseToken: string,
      _baseTokenBridge: string,
      _governor: string,
      _diamondCut: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    protocolVersion(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "protocolVersion()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    setNewVersionUpgrade(
      _cutData: {
        facetCuts: {
          facet: string;
          action: BigNumberish;
          isFreezable: boolean;
          selectors: BytesLike[];
        }[];
        initAddress: string;
        initCalldata: BytesLike;
      },
      _oldProtocolVersion: BigNumberish,
      _newProtocolVersion: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setNewVersionUpgrade(tuple,uint256,uint256)"(
      _cutData: {
        facetCuts: {
          facet: string;
          action: BigNumberish;
          isFreezable: boolean;
          selectors: BytesLike[];
        }[];
        initAddress: string;
        initCalldata: BytesLike;
      },
      _oldProtocolVersion: BigNumberish,
      _newProtocolVersion: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setUpgradeDiamondCut(
      _cutData: {
        facetCuts: {
          facet: string;
          action: BigNumberish;
          isFreezable: boolean;
          selectors: BytesLike[];
        }[];
        initAddress: string;
        initCalldata: BytesLike;
      },
      _oldProtocolVersion: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setUpgradeDiamondCut(tuple,uint256)"(
      _cutData: {
        facetCuts: {
          facet: string;
          action: BigNumberish;
          isFreezable: boolean;
          selectors: BytesLike[];
        }[];
        initAddress: string;
        initCalldata: BytesLike;
      },
      _oldProtocolVersion: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    stateTransitionChain(
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "stateTransitionChain(uint256)"(
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    storedBatchZero(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "storedBatchZero()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    totalChains(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "totalChains()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    upgradeChainFromVersion(
      _chainId: BigNumberish,
      _protocolVersion: BigNumberish,
      _cutData: {
        facetCuts: {
          facet: string;
          action: BigNumberish;
          isFreezable: boolean;
          selectors: BytesLike[];
        }[];
        initAddress: string;
        initCalldata: BytesLike;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "upgradeChainFromVersion(uint256,uint256,tuple)"(
      _chainId: BigNumberish,
      _protocolVersion: BigNumberish,
      _cutData: {
        facetCuts: {
          facet: string;
          action: BigNumberish;
          isFreezable: boolean;
          selectors: BytesLike[];
        }[];
        initAddress: string;
        initCalldata: BytesLike;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    upgradeCutHash(
      _protocolVersion: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "upgradeCutHash(uint256)"(
      _protocolVersion: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;
  };

  bridgehub(overrides?: CallOverrides): Promise<string>;

  "bridgehub()"(overrides?: CallOverrides): Promise<string>;

  genesisUpgrade(overrides?: CallOverrides): Promise<string>;

  "genesisUpgrade()"(overrides?: CallOverrides): Promise<string>;

  getName(overrides?: CallOverrides): Promise<string>;

  "getName()"(overrides?: CallOverrides): Promise<string>;

  governor(overrides?: CallOverrides): Promise<string>;

  "governor()"(overrides?: CallOverrides): Promise<string>;

  initialCutHash(overrides?: CallOverrides): Promise<string>;

  "initialCutHash()"(overrides?: CallOverrides): Promise<string>;

  initialize(
    _initalizeData: {
      governor: string;
      genesisUpgrade: string;
      genesisBatchHash: BytesLike;
      genesisIndexRepeatedStorageChanges: BigNumberish;
      genesisBatchCommitment: BytesLike;
      diamondCut: {
        facetCuts: {
          facet: string;
          action: BigNumberish;
          isFreezable: boolean;
          selectors: BytesLike[];
        }[];
        initAddress: string;
        initCalldata: BytesLike;
      };
      protocolVersion: BigNumberish;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(tuple)"(
    _initalizeData: {
      governor: string;
      genesisUpgrade: string;
      genesisBatchHash: BytesLike;
      genesisIndexRepeatedStorageChanges: BigNumberish;
      genesisBatchCommitment: BytesLike;
      diamondCut: {
        facetCuts: {
          facet: string;
          action: BigNumberish;
          isFreezable: boolean;
          selectors: BytesLike[];
        }[];
        initAddress: string;
        initCalldata: BytesLike;
      };
      protocolVersion: BigNumberish;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  newChain(
    _chainId: BigNumberish,
    _baseToken: string,
    _baseTokenBridge: string,
    _governor: string,
    _diamondCut: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "newChain(uint256,address,address,address,bytes)"(
    _chainId: BigNumberish,
    _baseToken: string,
    _baseTokenBridge: string,
    _governor: string,
    _diamondCut: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  protocolVersion(overrides?: CallOverrides): Promise<BigNumber>;

  "protocolVersion()"(overrides?: CallOverrides): Promise<BigNumber>;

  setNewVersionUpgrade(
    _cutData: {
      facetCuts: {
        facet: string;
        action: BigNumberish;
        isFreezable: boolean;
        selectors: BytesLike[];
      }[];
      initAddress: string;
      initCalldata: BytesLike;
    },
    _oldProtocolVersion: BigNumberish,
    _newProtocolVersion: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setNewVersionUpgrade(tuple,uint256,uint256)"(
    _cutData: {
      facetCuts: {
        facet: string;
        action: BigNumberish;
        isFreezable: boolean;
        selectors: BytesLike[];
      }[];
      initAddress: string;
      initCalldata: BytesLike;
    },
    _oldProtocolVersion: BigNumberish,
    _newProtocolVersion: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setUpgradeDiamondCut(
    _cutData: {
      facetCuts: {
        facet: string;
        action: BigNumberish;
        isFreezable: boolean;
        selectors: BytesLike[];
      }[];
      initAddress: string;
      initCalldata: BytesLike;
    },
    _oldProtocolVersion: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setUpgradeDiamondCut(tuple,uint256)"(
    _cutData: {
      facetCuts: {
        facet: string;
        action: BigNumberish;
        isFreezable: boolean;
        selectors: BytesLike[];
      }[];
      initAddress: string;
      initCalldata: BytesLike;
    },
    _oldProtocolVersion: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  stateTransitionChain(
    _chainId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "stateTransitionChain(uint256)"(
    _chainId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  storedBatchZero(overrides?: CallOverrides): Promise<string>;

  "storedBatchZero()"(overrides?: CallOverrides): Promise<string>;

  totalChains(overrides?: CallOverrides): Promise<BigNumber>;

  "totalChains()"(overrides?: CallOverrides): Promise<BigNumber>;

  upgradeChainFromVersion(
    _chainId: BigNumberish,
    _protocolVersion: BigNumberish,
    _cutData: {
      facetCuts: {
        facet: string;
        action: BigNumberish;
        isFreezable: boolean;
        selectors: BytesLike[];
      }[];
      initAddress: string;
      initCalldata: BytesLike;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "upgradeChainFromVersion(uint256,uint256,tuple)"(
    _chainId: BigNumberish,
    _protocolVersion: BigNumberish,
    _cutData: {
      facetCuts: {
        facet: string;
        action: BigNumberish;
        isFreezable: boolean;
        selectors: BytesLike[];
      }[];
      initAddress: string;
      initCalldata: BytesLike;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  upgradeCutHash(
    _protocolVersion: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "upgradeCutHash(uint256)"(
    _protocolVersion: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    bridgehub(overrides?: CallOverrides): Promise<string>;

    "bridgehub()"(overrides?: CallOverrides): Promise<string>;

    genesisUpgrade(overrides?: CallOverrides): Promise<string>;

    "genesisUpgrade()"(overrides?: CallOverrides): Promise<string>;

    getName(overrides?: CallOverrides): Promise<string>;

    "getName()"(overrides?: CallOverrides): Promise<string>;

    governor(overrides?: CallOverrides): Promise<string>;

    "governor()"(overrides?: CallOverrides): Promise<string>;

    initialCutHash(overrides?: CallOverrides): Promise<string>;

    "initialCutHash()"(overrides?: CallOverrides): Promise<string>;

    initialize(
      _initalizeData: {
        governor: string;
        genesisUpgrade: string;
        genesisBatchHash: BytesLike;
        genesisIndexRepeatedStorageChanges: BigNumberish;
        genesisBatchCommitment: BytesLike;
        diamondCut: {
          facetCuts: {
            facet: string;
            action: BigNumberish;
            isFreezable: boolean;
            selectors: BytesLike[];
          }[];
          initAddress: string;
          initCalldata: BytesLike;
        };
        protocolVersion: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(tuple)"(
      _initalizeData: {
        governor: string;
        genesisUpgrade: string;
        genesisBatchHash: BytesLike;
        genesisIndexRepeatedStorageChanges: BigNumberish;
        genesisBatchCommitment: BytesLike;
        diamondCut: {
          facetCuts: {
            facet: string;
            action: BigNumberish;
            isFreezable: boolean;
            selectors: BytesLike[];
          }[];
          initAddress: string;
          initCalldata: BytesLike;
        };
        protocolVersion: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    newChain(
      _chainId: BigNumberish,
      _baseToken: string,
      _baseTokenBridge: string,
      _governor: string,
      _diamondCut: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "newChain(uint256,address,address,address,bytes)"(
      _chainId: BigNumberish,
      _baseToken: string,
      _baseTokenBridge: string,
      _governor: string,
      _diamondCut: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    protocolVersion(overrides?: CallOverrides): Promise<BigNumber>;

    "protocolVersion()"(overrides?: CallOverrides): Promise<BigNumber>;

    setNewVersionUpgrade(
      _cutData: {
        facetCuts: {
          facet: string;
          action: BigNumberish;
          isFreezable: boolean;
          selectors: BytesLike[];
        }[];
        initAddress: string;
        initCalldata: BytesLike;
      },
      _oldProtocolVersion: BigNumberish,
      _newProtocolVersion: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setNewVersionUpgrade(tuple,uint256,uint256)"(
      _cutData: {
        facetCuts: {
          facet: string;
          action: BigNumberish;
          isFreezable: boolean;
          selectors: BytesLike[];
        }[];
        initAddress: string;
        initCalldata: BytesLike;
      },
      _oldProtocolVersion: BigNumberish,
      _newProtocolVersion: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setUpgradeDiamondCut(
      _cutData: {
        facetCuts: {
          facet: string;
          action: BigNumberish;
          isFreezable: boolean;
          selectors: BytesLike[];
        }[];
        initAddress: string;
        initCalldata: BytesLike;
      },
      _oldProtocolVersion: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setUpgradeDiamondCut(tuple,uint256)"(
      _cutData: {
        facetCuts: {
          facet: string;
          action: BigNumberish;
          isFreezable: boolean;
          selectors: BytesLike[];
        }[];
        initAddress: string;
        initCalldata: BytesLike;
      },
      _oldProtocolVersion: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stateTransitionChain(
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "stateTransitionChain(uint256)"(
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    storedBatchZero(overrides?: CallOverrides): Promise<string>;

    "storedBatchZero()"(overrides?: CallOverrides): Promise<string>;

    totalChains(overrides?: CallOverrides): Promise<BigNumber>;

    "totalChains()"(overrides?: CallOverrides): Promise<BigNumber>;

    upgradeChainFromVersion(
      _chainId: BigNumberish,
      _protocolVersion: BigNumberish,
      _cutData: {
        facetCuts: {
          facet: string;
          action: BigNumberish;
          isFreezable: boolean;
          selectors: BytesLike[];
        }[];
        initAddress: string;
        initCalldata: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "upgradeChainFromVersion(uint256,uint256,tuple)"(
      _chainId: BigNumberish,
      _protocolVersion: BigNumberish,
      _cutData: {
        facetCuts: {
          facet: string;
          action: BigNumberish;
          isFreezable: boolean;
          selectors: BytesLike[];
        }[];
        initAddress: string;
        initCalldata: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeCutHash(
      _protocolVersion: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "upgradeCutHash(uint256)"(
      _protocolVersion: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    StateTransitionNewChain(
      _chainId: BigNumberish | null,
      _stateTransitionChainContract: string | null
    ): EventFilter;
  };

  estimateGas: {
    bridgehub(overrides?: CallOverrides): Promise<BigNumber>;

    "bridgehub()"(overrides?: CallOverrides): Promise<BigNumber>;

    genesisUpgrade(overrides?: CallOverrides): Promise<BigNumber>;

    "genesisUpgrade()"(overrides?: CallOverrides): Promise<BigNumber>;

    getName(overrides?: CallOverrides): Promise<BigNumber>;

    "getName()"(overrides?: CallOverrides): Promise<BigNumber>;

    governor(overrides?: CallOverrides): Promise<BigNumber>;

    "governor()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialCutHash(overrides?: CallOverrides): Promise<BigNumber>;

    "initialCutHash()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _initalizeData: {
        governor: string;
        genesisUpgrade: string;
        genesisBatchHash: BytesLike;
        genesisIndexRepeatedStorageChanges: BigNumberish;
        genesisBatchCommitment: BytesLike;
        diamondCut: {
          facetCuts: {
            facet: string;
            action: BigNumberish;
            isFreezable: boolean;
            selectors: BytesLike[];
          }[];
          initAddress: string;
          initCalldata: BytesLike;
        };
        protocolVersion: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(tuple)"(
      _initalizeData: {
        governor: string;
        genesisUpgrade: string;
        genesisBatchHash: BytesLike;
        genesisIndexRepeatedStorageChanges: BigNumberish;
        genesisBatchCommitment: BytesLike;
        diamondCut: {
          facetCuts: {
            facet: string;
            action: BigNumberish;
            isFreezable: boolean;
            selectors: BytesLike[];
          }[];
          initAddress: string;
          initCalldata: BytesLike;
        };
        protocolVersion: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    newChain(
      _chainId: BigNumberish,
      _baseToken: string,
      _baseTokenBridge: string,
      _governor: string,
      _diamondCut: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "newChain(uint256,address,address,address,bytes)"(
      _chainId: BigNumberish,
      _baseToken: string,
      _baseTokenBridge: string,
      _governor: string,
      _diamondCut: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    protocolVersion(overrides?: CallOverrides): Promise<BigNumber>;

    "protocolVersion()"(overrides?: CallOverrides): Promise<BigNumber>;

    setNewVersionUpgrade(
      _cutData: {
        facetCuts: {
          facet: string;
          action: BigNumberish;
          isFreezable: boolean;
          selectors: BytesLike[];
        }[];
        initAddress: string;
        initCalldata: BytesLike;
      },
      _oldProtocolVersion: BigNumberish,
      _newProtocolVersion: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setNewVersionUpgrade(tuple,uint256,uint256)"(
      _cutData: {
        facetCuts: {
          facet: string;
          action: BigNumberish;
          isFreezable: boolean;
          selectors: BytesLike[];
        }[];
        initAddress: string;
        initCalldata: BytesLike;
      },
      _oldProtocolVersion: BigNumberish,
      _newProtocolVersion: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setUpgradeDiamondCut(
      _cutData: {
        facetCuts: {
          facet: string;
          action: BigNumberish;
          isFreezable: boolean;
          selectors: BytesLike[];
        }[];
        initAddress: string;
        initCalldata: BytesLike;
      },
      _oldProtocolVersion: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setUpgradeDiamondCut(tuple,uint256)"(
      _cutData: {
        facetCuts: {
          facet: string;
          action: BigNumberish;
          isFreezable: boolean;
          selectors: BytesLike[];
        }[];
        initAddress: string;
        initCalldata: BytesLike;
      },
      _oldProtocolVersion: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    stateTransitionChain(
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "stateTransitionChain(uint256)"(
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    storedBatchZero(overrides?: CallOverrides): Promise<BigNumber>;

    "storedBatchZero()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalChains(overrides?: CallOverrides): Promise<BigNumber>;

    "totalChains()"(overrides?: CallOverrides): Promise<BigNumber>;

    upgradeChainFromVersion(
      _chainId: BigNumberish,
      _protocolVersion: BigNumberish,
      _cutData: {
        facetCuts: {
          facet: string;
          action: BigNumberish;
          isFreezable: boolean;
          selectors: BytesLike[];
        }[];
        initAddress: string;
        initCalldata: BytesLike;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "upgradeChainFromVersion(uint256,uint256,tuple)"(
      _chainId: BigNumberish,
      _protocolVersion: BigNumberish,
      _cutData: {
        facetCuts: {
          facet: string;
          action: BigNumberish;
          isFreezable: boolean;
          selectors: BytesLike[];
        }[];
        initAddress: string;
        initCalldata: BytesLike;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    upgradeCutHash(
      _protocolVersion: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "upgradeCutHash(uint256)"(
      _protocolVersion: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bridgehub(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "bridgehub()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    genesisUpgrade(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "genesisUpgrade()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getName()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    governor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "governor()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialCutHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "initialCutHash()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _initalizeData: {
        governor: string;
        genesisUpgrade: string;
        genesisBatchHash: BytesLike;
        genesisIndexRepeatedStorageChanges: BigNumberish;
        genesisBatchCommitment: BytesLike;
        diamondCut: {
          facetCuts: {
            facet: string;
            action: BigNumberish;
            isFreezable: boolean;
            selectors: BytesLike[];
          }[];
          initAddress: string;
          initCalldata: BytesLike;
        };
        protocolVersion: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(tuple)"(
      _initalizeData: {
        governor: string;
        genesisUpgrade: string;
        genesisBatchHash: BytesLike;
        genesisIndexRepeatedStorageChanges: BigNumberish;
        genesisBatchCommitment: BytesLike;
        diamondCut: {
          facetCuts: {
            facet: string;
            action: BigNumberish;
            isFreezable: boolean;
            selectors: BytesLike[];
          }[];
          initAddress: string;
          initCalldata: BytesLike;
        };
        protocolVersion: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    newChain(
      _chainId: BigNumberish,
      _baseToken: string,
      _baseTokenBridge: string,
      _governor: string,
      _diamondCut: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "newChain(uint256,address,address,address,bytes)"(
      _chainId: BigNumberish,
      _baseToken: string,
      _baseTokenBridge: string,
      _governor: string,
      _diamondCut: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    protocolVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "protocolVersion()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setNewVersionUpgrade(
      _cutData: {
        facetCuts: {
          facet: string;
          action: BigNumberish;
          isFreezable: boolean;
          selectors: BytesLike[];
        }[];
        initAddress: string;
        initCalldata: BytesLike;
      },
      _oldProtocolVersion: BigNumberish,
      _newProtocolVersion: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setNewVersionUpgrade(tuple,uint256,uint256)"(
      _cutData: {
        facetCuts: {
          facet: string;
          action: BigNumberish;
          isFreezable: boolean;
          selectors: BytesLike[];
        }[];
        initAddress: string;
        initCalldata: BytesLike;
      },
      _oldProtocolVersion: BigNumberish,
      _newProtocolVersion: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setUpgradeDiamondCut(
      _cutData: {
        facetCuts: {
          facet: string;
          action: BigNumberish;
          isFreezable: boolean;
          selectors: BytesLike[];
        }[];
        initAddress: string;
        initCalldata: BytesLike;
      },
      _oldProtocolVersion: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setUpgradeDiamondCut(tuple,uint256)"(
      _cutData: {
        facetCuts: {
          facet: string;
          action: BigNumberish;
          isFreezable: boolean;
          selectors: BytesLike[];
        }[];
        initAddress: string;
        initCalldata: BytesLike;
      },
      _oldProtocolVersion: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    stateTransitionChain(
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "stateTransitionChain(uint256)"(
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    storedBatchZero(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "storedBatchZero()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalChains(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalChains()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    upgradeChainFromVersion(
      _chainId: BigNumberish,
      _protocolVersion: BigNumberish,
      _cutData: {
        facetCuts: {
          facet: string;
          action: BigNumberish;
          isFreezable: boolean;
          selectors: BytesLike[];
        }[];
        initAddress: string;
        initCalldata: BytesLike;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "upgradeChainFromVersion(uint256,uint256,tuple)"(
      _chainId: BigNumberish,
      _protocolVersion: BigNumberish,
      _cutData: {
        facetCuts: {
          facet: string;
          action: BigNumberish;
          isFreezable: boolean;
          selectors: BytesLike[];
        }[];
        initAddress: string;
        initCalldata: BytesLike;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    upgradeCutHash(
      _protocolVersion: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "upgradeCutHash(uint256)"(
      _protocolVersion: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
